/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.7.2.0 (NJsonSchema v9.6.3.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

namespace MemoryApi.HttpClient {

export interface IAuthClient {
    /**
     * attemps a log in with post body
     * @body Login form data
     * @return successful login, token returned
     */
    login(body: LoginModel): Promise<string>;
    /**
     * attempts a log in with provider details in post body
     * @body Provider login data
     * @return successful login, token returned
     */
    loginProvider(body: LoginProviderModel): Promise<string>;
    /**
     * valiates a user token
     * @x_AuthToken Auth token to validate
     * @return auth token validated successfully
     */
    validate(x_AuthToken: string): Promise<string>;
}

export class AuthClient implements IAuthClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * attemps a log in with post body
     * @body Login form data
     * @return successful login, token returned
     */
    login(body: LoginModel): Promise<string> {
        let url_ = this.baseUrl + "/auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * attempts a log in with provider details in post body
     * @body Provider login data
     * @return successful login, token returned
     */
    loginProvider(body: LoginProviderModel): Promise<string> {
        let url_ = this.baseUrl + "/auth/login-provider";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoginProvider(_response);
        });
    }

    protected processLoginProvider(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * valiates a user token
     * @x_AuthToken Auth token to validate
     * @return auth token validated successfully
     */
    validate(x_AuthToken: string): Promise<string> {
        let url_ = this.baseUrl + "/auth/validate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "X-AuthToken": x_AuthToken, 
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValidate(_response);
        });
    }

    protected processValidate(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }
}

export interface IUsersClient {
    /**
     * registers a user with the service
     * @body Registration form data
     * @return successful registration and automatic login
     */
    register(body: RegisterModel): Promise<string>;
    /**
     * gets current user data
     * @x_AuthToken User auth token.
     * @return successful retrieval of user
     */
    getCurrentUserData(x_AuthToken?: string | null): Promise<User>;
}

export class UsersClient implements IUsersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * registers a user with the service
     * @body Registration form data
     * @return successful registration and automatic login
     */
    register(body: RegisterModel): Promise<string> {
        let url_ = this.baseUrl + "/users/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * gets current user data
     * @x_AuthToken User auth token.
     * @return successful retrieval of user
     */
    getCurrentUserData(x_AuthToken?: string | null): Promise<User> {
        let url_ = this.baseUrl + "/users/current-user-data";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "X-AuthToken": x_AuthToken, 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUserData(_response);
        });
    }

    protected processGetCurrentUserData(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? User.fromJS(resultData200) : new User();
            return result200;
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(<any>null);
    }
}

export interface ILessonsClient {
    /**
     * gets active user lessons
     * @x_AuthToken User auth token.
     * @language IETF Tag for requested language.
     * @return successful query
     */
    getList(x_AuthToken?: string | null, language?: string | null): Promise<LessonList>;
    /**
     * gets all lessons used by user
     * @x_AuthToken User auth token.
     * @return successful query
     */
    getLanguages(x_AuthToken?: string | null): Promise<Language[]>;
}

export class LessonsClient implements ILessonsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * gets active user lessons
     * @x_AuthToken User auth token.
     * @language IETF Tag for requested language.
     * @return successful query
     */
    getList(x_AuthToken?: string | null, language?: string | null): Promise<LessonList> {
        let url_ = this.baseUrl + "/lessons/list?";
        if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "X-AuthToken": x_AuthToken, 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<LessonList> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? LessonList.fromJS(resultData200) : new LessonList();
            return result200;
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LessonList>(<any>null);
    }

    /**
     * gets all lessons used by user
     * @x_AuthToken User auth token.
     * @return successful query
     */
    getLanguages(x_AuthToken?: string | null): Promise<Language[]> {
        let url_ = this.baseUrl + "/lessons/languages-list";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "X-AuthToken": x_AuthToken, 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLanguages(_response);
        });
    }

    protected processGetLanguages(response: Response): Promise<Language[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Language.fromJS(item));
            }
            return result200;
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Language[]>(<any>null);
    }
}

export class LoginModel implements ILoginModel {
    identifier?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.identifier = data["identifier"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): LoginModel {
        let result = new LoginModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["identifier"] = this.identifier;
        data["password"] = this.password;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new LoginModel();
        result.init(json);
        return result;
    }
}

export interface ILoginModel {
    identifier?: string | undefined;
    password?: string | undefined;
}

export class LoginProviderModel implements ILoginProviderModel {
    provider?: string | undefined;
    accessToken?: string | undefined;

    constructor(data?: ILoginProviderModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.provider = data["provider"];
            this.accessToken = data["accessToken"];
        }
    }

    static fromJS(data: any): LoginProviderModel {
        let result = new LoginProviderModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["provider"] = this.provider;
        data["accessToken"] = this.accessToken;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new LoginProviderModel();
        result.init(json);
        return result;
    }
}

export interface ILoginProviderModel {
    provider?: string | undefined;
    accessToken?: string | undefined;
}

export class RegisterModel implements IRegisterModel {
    /** email address for new user */
    email?: string | undefined;
    /** username for new user login */
    username?: string | undefined;
    /** password for new account */
    password?: string | undefined;
    /** password validation */
    passwordAgain?: string | undefined;

    constructor(data?: IRegisterModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.username = data["username"];
            this.password = data["password"];
            this.passwordAgain = data["passwordAgain"];
        }
    }

    static fromJS(data: any): RegisterModel {
        let result = new RegisterModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["username"] = this.username;
        data["password"] = this.password;
        data["passwordAgain"] = this.passwordAgain;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new RegisterModel();
        result.init(json);
        return result;
    }
}

export interface IRegisterModel {
    /** email address for new user */
    email?: string | undefined;
    /** username for new user login */
    username?: string | undefined;
    /** password for new account */
    password?: string | undefined;
    /** password validation */
    passwordAgain?: string | undefined;
}

export class User implements IUser {
    username?: string | undefined;
    name: FullName = new FullName();
    userAddress: Address = new Address();
    birthDate: number;
    emailVerified: boolean;
    email?: string | undefined;
    gender?: string | undefined;
    locale?: string | undefined;
    phoneVerified: boolean;
    phoneNumber?: string | undefined;
    profilePicture?: string | undefined;
    displayName?: string | undefined;
    updatedAt: number;
    zoneInfo?: string | undefined;
    roles?: string[] | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.username = data["Username"];
            this.name = data["Name"] ? FullName.fromJS(data["Name"]) : new FullName();
            this.userAddress = data["UserAddress"] ? Address.fromJS(data["UserAddress"]) : new Address();
            this.birthDate = data["BirthDate"];
            this.emailVerified = data["EmailVerified"];
            this.email = data["Email"];
            this.gender = data["Gender"];
            this.locale = data["Locale"];
            this.phoneVerified = data["PhoneVerified"];
            this.phoneNumber = data["PhoneNumber"];
            this.profilePicture = data["ProfilePicture"];
            this.displayName = data["DisplayName"];
            this.updatedAt = data["UpdatedAt"];
            this.zoneInfo = data["ZoneInfo"];
            if (data["Roles"] && data["Roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["Roles"])
                    this.roles.push(item);
            }
        }
    }

    static fromJS(data: any): User {
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Username"] = this.username;
        data["Name"] = this.name ? this.name.toJSON() : <any>undefined;
        data["UserAddress"] = this.userAddress ? this.userAddress.toJSON() : <any>undefined;
        data["BirthDate"] = this.birthDate;
        data["EmailVerified"] = this.emailVerified;
        data["Email"] = this.email;
        data["Gender"] = this.gender;
        data["Locale"] = this.locale;
        data["PhoneVerified"] = this.phoneVerified;
        data["PhoneNumber"] = this.phoneNumber;
        data["ProfilePicture"] = this.profilePicture;
        data["DisplayName"] = this.displayName;
        data["UpdatedAt"] = this.updatedAt;
        data["ZoneInfo"] = this.zoneInfo;
        if (this.roles && this.roles.constructor === Array) {
            data["Roles"] = [];
            for (let item of this.roles)
                data["Roles"].push(item);
        }
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new User();
        result.init(json);
        return result;
    }
}

export interface IUser {
    username?: string | undefined;
    name: FullName;
    userAddress: Address;
    birthDate: number;
    emailVerified: boolean;
    email?: string | undefined;
    gender?: string | undefined;
    locale?: string | undefined;
    phoneVerified: boolean;
    phoneNumber?: string | undefined;
    profilePicture?: string | undefined;
    displayName?: string | undefined;
    updatedAt: number;
    zoneInfo?: string | undefined;
    roles?: string[] | undefined;
}

export class ValueType implements IValueType {

    constructor(data?: IValueType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
        }
    }

    static fromJS(data: any): ValueType {
        let result = new ValueType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new ValueType();
        result.init(json);
        return result;
    }
}

export interface IValueType {
}

export class FullName extends ValueType implements IFullName {
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;

    constructor(data?: IFullName) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.firstName = data["FirstName"];
            this.middleName = data["MiddleName"];
            this.lastName = data["LastName"];
        }
    }

    static fromJS(data: any): FullName {
        let result = new FullName();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FirstName"] = this.firstName;
        data["MiddleName"] = this.middleName;
        data["LastName"] = this.lastName;
        super.toJSON(data);
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new FullName();
        result.init(json);
        return result;
    }
}

export interface IFullName extends IValueType {
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
}

export class Address extends ValueType implements IAddress {
    line1?: string | undefined;
    line2?: string | undefined;
    country?: string | undefined;
    postalCode?: string | undefined;
    city?: string | undefined;
    locality?: string | undefined;

    constructor(data?: IAddress) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.line1 = data["Line1"];
            this.line2 = data["Line2"];
            this.country = data["Country"];
            this.postalCode = data["PostalCode"];
            this.city = data["City"];
            this.locality = data["Locality"];
        }
    }

    static fromJS(data: any): Address {
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Line1"] = this.line1;
        data["Line2"] = this.line2;
        data["Country"] = this.country;
        data["PostalCode"] = this.postalCode;
        data["City"] = this.city;
        data["Locality"] = this.locality;
        super.toJSON(data);
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new Address();
        result.init(json);
        return result;
    }
}

export interface IAddress extends IValueType {
    line1?: string | undefined;
    line2?: string | undefined;
    country?: string | undefined;
    postalCode?: string | undefined;
    city?: string | undefined;
    locality?: string | undefined;
}

export class Language implements ILanguage {
    iETFTag?: string | undefined;
    unlocalizedName?: string | undefined;
    unlocalizedCountryName?: string | undefined;
    nativeName?: string | undefined;
    nativeCountryName?: string | undefined;

    constructor(data?: ILanguage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iETFTag = data["IETFTag"];
            this.unlocalizedName = data["UnlocalizedName"];
            this.unlocalizedCountryName = data["UnlocalizedCountryName"];
            this.nativeName = data["NativeName"];
            this.nativeCountryName = data["NativeCountryName"];
        }
    }

    static fromJS(data: any): Language {
        let result = new Language();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IETFTag"] = this.iETFTag;
        data["UnlocalizedName"] = this.unlocalizedName;
        data["UnlocalizedCountryName"] = this.unlocalizedCountryName;
        data["NativeName"] = this.nativeName;
        data["NativeCountryName"] = this.nativeCountryName;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new Language();
        result.init(json);
        return result;
    }
}

export interface ILanguage {
    iETFTag?: string | undefined;
    unlocalizedName?: string | undefined;
    unlocalizedCountryName?: string | undefined;
    nativeName?: string | undefined;
    nativeCountryName?: string | undefined;
}

export class LanguagePair implements ILanguagePair {
    from?: Language | undefined;
    to?: Language | undefined;

    constructor(data?: ILanguagePair) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.from = data["From"] ? Language.fromJS(data["From"]) : <any>undefined;
            this.to = data["To"] ? Language.fromJS(data["To"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LanguagePair {
        let result = new LanguagePair();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["From"] = this.from ? this.from.toJSON() : <any>undefined;
        data["To"] = this.to ? this.to.toJSON() : <any>undefined;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new LanguagePair();
        result.init(json);
        return result;
    }
}

export interface ILanguagePair {
    from?: Language | undefined;
    to?: Language | undefined;
}

export class Lesson implements ILesson {
    id?: string | undefined;
    from?: string | undefined;
    reading?: string | undefined;
    to?: string | undefined;
    languages?: LanguagePair | undefined;

    constructor(data?: ILesson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.from = data["From"];
            this.reading = data["Reading"];
            this.to = data["To"];
            this.languages = data["Languages"] ? LanguagePair.fromJS(data["Languages"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Lesson {
        let result = new Lesson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["From"] = this.from;
        data["Reading"] = this.reading;
        data["To"] = this.to;
        data["Languages"] = this.languages ? this.languages.toJSON() : <any>undefined;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new Lesson();
        result.init(json);
        return result;
    }
}

export interface ILesson {
    id?: string | undefined;
    from?: string | undefined;
    reading?: string | undefined;
    to?: string | undefined;
    languages?: LanguagePair | undefined;
}

export class LessonList extends Lesson[] implements ILessonList {

    constructor(data?: ILessonList) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): LessonList {
        let result = new LessonList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new LessonList();
        result.init(json);
        return result;
    }
}

export interface ILessonList extends ILesson[] {
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
	headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
		super();

        this.message = message;
        this.status = status;
        this.response = response;
		this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new SwaggerException(message, status, response, headers, result);
}

}